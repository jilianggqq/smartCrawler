/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.1/userguide/java_library_plugin.html
 */
 
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.5.6.RELEASE")
    }
}

// Apply the java-library plugin to add support for Java Library
apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    //jcenter()
    mavenCentral()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
	compile("org.springframework.boot:spring-boot-starter-web")
    testCompile('org.springframework.boot:spring-boot-starter-test')
    compile("org.springframework.boot:spring-boot-starter")
    // compile("org.springframework.boot:spring-boot-starter-data-redis")
    // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-redis
	compile group: 'org.springframework.boot', name: 'spring-boot-starter-redis', version: '1.4.3.RELEASE'
    
    // https://mvnrepository.com/artifact/com.google.code.gson/gson
	compile group: 'com.google.code.gson', name: 'gson', version: '2.8.0'
    // https://mvnrepository.com/artifact/org.jsoup/jsoup
	compile group: 'org.jsoup', name: 'jsoup', version: '1.8.3'
    // https://mvnrepository.com/artifact/org.eclipse.jetty/jetty-client
	compile group: 'org.eclipse.jetty', name: 'jetty-client', version: '9.4.6.v20170531'
	// https://mvnrepository.com/artifact/org.eclipse.jetty/jetty-util
	compile group: 'org.eclipse.jetty', name: 'jetty-util', version: '9.4.6.v20170531'
	
    
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    // api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:22.0'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
}


mainClassName = 'gqq.importio.SpringBootRedisApplication'
